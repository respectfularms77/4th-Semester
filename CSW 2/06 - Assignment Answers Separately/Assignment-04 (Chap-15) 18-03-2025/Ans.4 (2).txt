1. package Assignment_4;
class Assgn4_Q1 {
        
    static class UnreachableObject {
        private String name;
        
        public UnreachableObject(String name) {
            this.name = name;
        }
       
        public void show() {          
            System.out.println("Object created with name: " + name);
            display();
        }
        public void display() {
            UnreachableObject anotherObject = new UnreachableObject("Another Object");
            System.out.println("Created new object inside display method: " + anotherObject.name);
        }

        @Override
        protected void finalize() {
            System.out.println("Garbage collected: " + name);
        }
    }

    public static void main(String[] args) {      
        UnreachableObject obj = new UnreachableObject("Unreachable Object");        
        obj.show();       
        System.gc();        
        try {
           
            Thread.sleep(2000);
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
    }
}



2. package Assignment_4;
class Assgn4_Q2 {

    static class ReassigningReference {
        private String name;
        
        public ReassigningReference(String name) {
            this.name = name;
        }

        @Override
        protected void finalize() {
            System.out.println("Garbage collected: " + name);
        }
    }
    public static void main(String[] args) {
        
        ReassigningReference obj1 = new ReassigningReference("Object 1");
        ReassigningReference obj2 = new ReassigningReference("Object 2");
        
        System.out.println("obj1: " + obj1);
        System.out.println("obj2: " + obj2);
      
        obj1 = obj2;
        System.gc();
        
        try {
            Thread.sleep(2000); 
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
    }
}



3. package Assignment_4;
class Assgn4_Q3 {

    static class NullifiedReference {
        private String name;

        public NullifiedReference(String name) {
            this.name = name;
        }

        @Override
        protected void finalize() {
            System.out.println("Garbage collected: " + name);
        }
    }

    public static void main(String[] args) {
        
        NullifiedReference obj = new NullifiedReference("Nullified Object");
        System.out.println("Object created: " + obj);
        obj = null;
        System.gc();

        try {
            Thread.sleep(2000); 
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
    }
}





4. package Assignment_4;
class Assgn4_Q4 {

    static class AnonymousObject {
        private String name;

        public AnonymousObject(String name) {
            this.name = name;
        }

        @Override
        protected void finalize() {
            System.out.println("Garbage collected: " + name);
        }
    }

    public static void main(String[] args) {

        new AnonymousObject("Anonymous Object");

        System.gc();

        try {
            Thread.sleep(2000); 
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
    }
}





5. package Assignment_4;
class Assgn4_Q5 {

    static class DataObject {
        private int intValue;
        private double doubleValue;

        public DataObject(int intValue, double doubleValue) {
            this.intValue = intValue;
            this.doubleValue = doubleValue;
        }

        public void setIntValue(int intValue) {
            this.intValue = intValue;
        }

        public void setDoubleValue(double doubleValue) {
            this.doubleValue = doubleValue;
        }

        public void updateValues(int intValue, double doubleValue) {
            this.intValue = intValue;
            this.doubleValue = doubleValue;
        }

        public void printValues() {
            System.out.println("Integer Value: " + intValue + ", Double Value: " + doubleValue);
        }

        @Override
        protected void finalize() {
            System.out.println("Object garbage collected!");
        }
    }

    public static void main(String[] args) {
 
        Runtime runtime = Runtime.getRuntime();

        System.out.println("Initial memory usage:");
        long initialMemory = runtime.totalMemory() - runtime.freeMemory();
        System.out.println("Total Memory: " + runtime.totalMemory() + " bytes");
        System.out.println("Used Memory: " + initialMemory + " bytes");

        DataObject obj1 = new DataObject(5, 10.5);
        DataObject obj2 = new DataObject(10, 20.5);

        obj1.printValues();
        obj2.printValues();

        obj1.updateValues(15, 25.5);
        obj2.updateValues(20, 30.5);

        obj1.printValues();
        obj2.printValues();

        obj1 = null;
        obj2 = null;

        System.gc();

        try {
            Thread.sleep(2000);
        } catch (InterruptedException e) {
            e.printStackTrace();
        }

        System.out.println("Memory usage after making objects unreachable and requesting garbage collection:");
        long finalMemory = runtime.totalMemory() - runtime.freeMemory();
        System.out.println("Total Memory: " + runtime.totalMemory() + " bytes");
        System.out.println("Used Memory: " + finalMemory + " bytes");

        System.out.println("Memory freed: " + (initialMemory - finalMemory) + " bytes");
    }
}





6. package Assignment_4;
public class Assgn4_Q6 {

    static class MemoryIntensiveObject {
        private int[] data;
        public MemoryIntensiveObject(int size) {
            this.data = new int[size]; 
        }
    }
    public static void main(String[] args) {       
        int objectSize = 1000; 
        int numObjects = 50; 
        Runtime runtime = Runtime.getRuntime();
        long startTime = System.currentTimeMillis();
        System.out.println("Starting memory test");
        printMemoryUsage(runtime, "Initial");
        for (int i = 0; i < numObjects; i++) {
            new MemoryIntensiveObject(objectSize); 
            if (i % 100 == 0) { 
            printMemoryUsage(runtime, "After " + (i + 1) + " objects");
            }
        }

        System.gc();
        try {
            Thread.sleep(2000); 
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
        printMemoryUsage(runtime, "After garbage collection");
        long endTime = System.currentTimeMillis();
        System.out.println("Memory test completed in " + (endTime - startTime) + " milliseconds");
    }
    private static void printMemoryUsage(Runtime runtime, String stage) {
        long totalMemory = runtime.totalMemory(); 
        long freeMemory = runtime.freeMemory();  
        long usedMemory = totalMemory - freeMemory; 
        long timestamp = System.currentTimeMillis(); 

  System.out.printf("[%d] %s - Total Memory: %d bytes, Free Memory: %d bytes, Used Memory: %d bytes%n",
   timestamp, stage, totalMemory, freeMemory, usedMemory);
    }
}




7. package Assignment_4;
public class Assgn4_Q7 {

    static class Student {
        private String studentName;
        private int studentID;
        private String courseName;

        public Student(String studentName, int studentID, String courseName) {
            this.studentName = studentName;
            this.studentID = studentID;
            this.courseName = courseName;
        }

        public void displayStudentInfo() {
            System.out.println("Student Name: " + studentName);
            System.out.println("Student ID: " + studentID);
            System.out.println("Course Name: " + courseName);
        }

        @Override
        protected void finalize() {
            System.out.println("Student object with ID " + studentID + " is garbage collected.");
        }
    }

    public static void main(String[] args) {

        Runtime runtime = Runtime.getRuntime();
        printMemoryUsage(runtime, "Initial");
        Student student1 = new Student("Anwesha", 11, "Computer Science");
        Student student2 = new Student("Mikesh", 19, "Electrical Engineering");
        Student student3 = new Student("Sreeja", 10, "Mechanical Engineering");

        student1.displayStudentInfo();
        student2.displayStudentInfo();
        student3.displayStudentInfo();

        student1 = null;
        student2 = null;
        student3 = null;

        System.gc();

        try {
            Thread.sleep(2000); 
        } catch (InterruptedException e) {
            e.printStackTrace();
        }

        printMemoryUsage(runtime, "After garbage collection");

        printMemoryUsage(runtime, "Final");
    }

    private static void printMemoryUsage(Runtime runtime, String stage) {
        long totalMemory = runtime.totalMemory(); 
        long freeMemory = runtime.freeMemory();   
        long usedMemory = totalMemory - freeMemory; 
        long timestamp = System.currentTimeMillis(); 

 System.out.printf("[%d] %s - Total Memory: %d bytes, Free Memory: %d bytes, Used Memory: %d bytes%n",
        timestamp, stage, totalMemory, freeMemory, usedMemory);
    }
}





