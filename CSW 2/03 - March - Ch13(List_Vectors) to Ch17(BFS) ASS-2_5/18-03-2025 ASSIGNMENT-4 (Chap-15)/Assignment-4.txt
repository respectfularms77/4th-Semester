
1.	Write a Java program to demonstrate garbage collection using an UnreachableObject class. It should include a constructor to initialize an object with a given name, a show() method creating an instance and invoking display(), and the display() method creating another instance. The main() method should call show() and explicitly invoke the garbage collector. The program must override the finalize() method to print the object's name upon successful garbage collection, illustrating how unreachable objects are collected.

class UnreachableObject {
    private String name;

    // Constructor to initialize an object with a given name
    public UnreachableObject(String name) {
        this.name = name;
        System.out.println(name + " created.");
    }

    // Method to create an instance and invoke display()
    public void show() {
        UnreachableObject obj1 = new UnreachableObject("Object1");
        obj1.display();
    }

    // Method to create another instance
    @SuppressWarnings("unused")
    public void display() {
        UnreachableObject obj2 = new UnreachableObject("Object2");
    }

    // Overriding finalize() method to demonstrate garbage collection
    @Override
    protected void finalize() throws Throwable {
        System.out.println(name + " is being garbage collected.");
    }

    public static void main(String[] args) {
        UnreachableObject obj = new UnreachableObject("MainObject");
        obj.show();

        // Explicitly invoking garbage collector
        obj = null; // Making object eligible for garbage collection
        System.gc();

        // Suggest the JVM to run finalization
        Runtime.getRuntime().runFinalization();

        System.out.println("End of main method.");
    }
}


2.	Develop a Java program to demonstrate reference reassignment and garbage collection using the ReassigningReference class. The class should have a constructor to initialize an object with a given name. In the main() method, create two instances of ReassigningReference, reassign one reference to another, and then explicitly invoke the garbage collector. Override the finalize() method to print the object's name upon successful garbage collection.



class ReassigningReference {
    private String name;

    // Constructor to initialize an object with a given name
    public ReassigningReference(String name) {
        this.name = name;
        System.out.println(name + " created.");
    }

    // Overriding finalize() method to demonstrate garbage collection
    @Override
    protected void finalize() throws Throwable {
        System.out.println(name + " is being garbage collected.");
    }

    public static void main(String[] args) {
        // Creating two instances
        @SuppressWarnings("unused")
        ReassigningReference obj1 = new ReassigningReference("Object1");
        ReassigningReference obj2 = new ReassigningReference("Object2");

        // Reassigning obj1 to obj2, making the first Object1 eligible for garbage collection
        obj1 = obj2;

        // Explicitly invoking garbage collector
        System.gc();

        // Suggest the JVM to run finalization (alternative to sleep)
        Runtime.getRuntime().runFinalization();

        System.out.println("End of main method.");
    }
}








3.	Write a Java program to demonstrate nullification of references and garbage collection using the NullifiedReference class. The class should have a constructor to initialize an object with a given name. In the main() method, create an instance of NullifiedReference, assign it, then nullify the reference, and explicitly invoke the garbage collector. Override the finalize() method to print the object's name upon successful garbage collection.



class NullifiedReference {
    private String name;

    // Constructor to initialize an object with a given name
    public NullifiedReference(String name) {
        this.name = name;
        System.out.println(name + " created.");
    }

    // Overriding finalize() method to demonstrate garbage collection
    @Override
    protected void finalize() throws Throwable {
        System.out.println(name + " is being garbage collected.");
    }

    @SuppressWarnings("unused")
    public static void main(String[] args) {
        // Creating an instance of NullifiedReference
        NullifiedReference obj = new NullifiedReference("TestObject");

        // Nullifying the reference, making the object eligible for garbage collection
        obj = null;

        // Explicitly invoking garbage collector
        System.gc();

        // Suggest the JVM to run finalization
        Runtime.getRuntime().runFinalization();

        System.out.println("End of main method.");
    }
}











4.	Create a Java program to demonstrate anonymous objects and garbage collection using the AnonymousObject class. The class should have a constructor to initialize an object with a name. In the main() method, create an anonymous object and explicitly invoke the garbage collector. Override the finalize() method to print the object's name upon successful garbage collection.




class AnonymousObject {
    private String name;

    // Constructor to initialize an object with a given name
    public AnonymousObject(String name) {
        this.name = name;
        System.out.println(name + " created.");
    }

    // Overriding finalize() method to demonstrate garbage collection
    @Override
    protected void finalize() throws Throwable {
        System.out.println(name + " is being garbage collected.");
    }

    public static void main(String[] args) {
        // Creating an anonymous object
        new AnonymousObject("TempObject");

        // Explicitly invoking garbage collector
        System.gc();

        // Suggest the JVM to run finalization
        Runtime.getRuntime().runFinalization();

        System.out.println("End of main method.");
    }
}












5.	Develop a Java class with private integer and double data members, along with methods for initialization, setting, and updating these members. Create two objects of this class and invoke the necessary methods to modify the data. Use the Runtime class to calculate the total allocated memory and memory occupied by the objects. Apply any technique to make the objects unreachable, making them eligible for garbage collection. Finally, recheck the utilized and total memory using the Runtime class.


class MemoryDemo {
    private int intValue;
    private double doubleValue;

    // Constructor for initialization
    public MemoryDemo(int intValue, double doubleValue) {
        this.intValue = intValue;
        this.doubleValue = doubleValue;
        System.out.println("Object created with int: " + intValue + ", double: " + doubleValue);
    }

    // Method to update values
    public void updateValues(int newInt, double newDouble) {
        this.intValue = newInt;
        this.doubleValue = newDouble;
        System.out.println("Values updated to int: " + newInt + ", double: " + newDouble);
    }

    // Overriding finalize() method to detect garbage collection
    @Override
    protected void finalize() throws Throwable {
        System.out.println("Object with int: " + intValue + ", double: " + doubleValue + " is being garbage collected.");
    }

    public static void main(String[] args) {
        // Get runtime instance
        Runtime runtime = Runtime.getRuntime();

        // Calculate memory before object creation
        long totalMemoryBefore = runtime.totalMemory();
        long freeMemoryBefore = runtime.freeMemory();
        long usedMemoryBefore = totalMemoryBefore - freeMemoryBefore;

        System.out.println("\nMemory before object creation:");
        System.out.println("Total Memory: " + totalMemoryBefore);
        System.out.println("Used Memory: " + usedMemoryBefore);

        // Creating objects
        MemoryDemo obj1 = new MemoryDemo(10, 20.5);
        MemoryDemo obj2 = new MemoryDemo(30, 40.7);

        // Updating object values
        obj1.updateValues(50, 60.9);
        obj2.updateValues(70, 80.3);

        // Calculate memory after object creation
        long totalMemoryAfterCreation = runtime.totalMemory();
        long freeMemoryAfterCreation = runtime.freeMemory();
        long usedMemoryAfterCreation = totalMemoryAfterCreation - freeMemoryAfterCreation;

        System.out.println("\nMemory after object creation:");
        System.out.println("Total Memory: " + totalMemoryAfterCreation);
        System.out.println("Used Memory: " + usedMemoryAfterCreation);

        // Making objects unreachable
        obj1 = null;
        obj2 = null;

        // Request garbage collection
        System.gc();
        runtime.runFinalization();

        // Calculate memory after garbage collection
        long totalMemoryAfterGC = runtime.totalMemory();
        long freeMemoryAfterGC = runtime.freeMemory();
        long usedMemoryAfterGC = totalMemoryAfterGC - freeMemoryAfterGC;

        System.out.println("\nMemory after garbage collection:");
        System.out.println("Total Memory: " + totalMemoryAfterGC);
        System.out.println("Used Memory: " + usedMemoryAfterGC);

        System.out.println("\nEnd of main method.");
    }
}


















6.	Write a memory-intensive Java program that creates a large number of objects and test it using the G1 garbage collector. Print timestamps along with the total heap size and free memory. Use the following commands to retrieve heap memory details: • Total heap memory: Runtime.getRuntime().totalMemory(); • Free heap memory: Runtime.getRuntime().freeMemory();



import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

class MemoryIntensiveApp {
    private int id;
    private double value;

    // Constructor
    public MemoryIntensiveApp(int id, double value) {
        this.id = id;
        this.value = value;
    }

    // Print formatted timestamp
    private static String getTimestamp() {
        return new SimpleDateFormat("HH:mm:ss.SSS").format(new Date());
    }

    public static void main(String[] args) {
        Runtime runtime = Runtime.getRuntime();

        System.out.println(getTimestamp() + " - Starting Memory Intensive Task");

        // Memory details before object creation
        long totalBefore = runtime.totalMemory();
        long freeBefore = runtime.freeMemory();
        System.out.println(getTimestamp() + " - Before Object Creation - Total Heap: " + totalBefore + ", Free Heap: " + freeBefore);

        // Creating a large number of objects
        List<MemoryIntensiveApp> list = new ArrayList<>();
        for (int i = 0; i < 10_000_000; i++) {
            list.add(new MemoryIntensiveApp(i, Math.random() * 100));
        }

        // Memory details after object creation
        long totalAfterCreation = runtime.totalMemory();
        long freeAfterCreation = runtime.freeMemory();
        System.out.println(getTimestamp() + " - After Object Creation - Total Heap: " + totalAfterCreation + ", Free Heap: " + freeAfterCreation);

        // Making objects eligible for garbage collection
        list = null;

        // Suggest garbage collection
        System.out.println(getTimestamp() + " - Requesting Garbage Collection...");
        System.gc();
        runtime.runFinalization();

        // Memory details after garbage collection
        long totalAfterGC = runtime.totalMemory();
        long freeAfterGC = runtime.freeMemory();
        System.out.println(getTimestamp() + " - After Garbage Collection - Total Heap: " + totalAfterGC + ", Free Heap: " + freeAfterGC);

        System.out.println(getTimestamp() + " - Program Completed.");
    }
}


































7.	Create a Java program for university student enrollment using a Student class to manage course details and student information. Implement efficient garbage collection for memory management and use the Runtime class to monitor memory usage. Override the finalize() method to print a message upon successful garbage collection.



import java.util.ArrayList;
import java.util.List;

class Student {
    private int studentId;
    private String name;
    private List<String> courses;

    // Constructor
    public Student(int studentId, String name) {
        this.studentId = studentId;
        this.name = name;
        this.courses = new ArrayList<>();
        System.out.println("Student " + name + " (ID: " + studentId + ") enrolled.");
    }

    // Enroll in a course
    public void enrollCourse(String course) {
        courses.add(course);
        System.out.println(name + " enrolled in: " + course);
    }

    // Withdraw from all courses (make eligible for garbage collection)
    public void withdraw() {
        courses.clear();
        System.out.println(name + " has withdrawn from all courses.");
    }

    // Overriding finalize() to demonstrate garbage collection
    @Override
    protected void finalize() throws Throwable {
        System.out.println("Student " + name + " (ID: " + studentId + ") is being garbage collected.");
    }

    public static void main(String[] args) {
        Runtime runtime = Runtime.getRuntime();

        // Memory before student enrollment
        long totalBefore = runtime.totalMemory();
        long freeBefore = runtime.freeMemory();
        System.out.println("\nMemory Before Enrollment - Total Heap: " + totalBefore + ", Free Heap: " + freeBefore);

        // Creating students
        Student student1 = new Student(101, "Alice");
        Student student2 = new Student(102, "Bob");

        // Enrolling students in courses
        student1.enrollCourse("Mathematics");
        student1.enrollCourse("Physics");
        student2.enrollCourse("Computer Science");

        // Memory after enrollment
        long totalAfterEnroll = runtime.totalMemory();
        long freeAfterEnroll = runtime.freeMemory();
        System.out.println("\nMemory After Enrollment - Total Heap: " + totalAfterEnroll + ", Free Heap: " + freeAfterEnroll);

        // Withdraw students and make them eligible for GC
        student1.withdraw();
        student2.withdraw();

        student1 = null;
        student2 = null;

        // Request garbage collection
        System.out.println("\nRequesting Garbage Collection...");
        System.gc();
        runtime.runFinalization();

        // Memory after garbage collection
        long totalAfterGC = runtime.totalMemory();
        long freeAfterGC = runtime.freeMemory();
        System.out.println("\nMemory After Garbage Collection - Total Heap: " + totalAfterGC + ", Free Heap: " + freeAfterGC);

        System.out.println("\nEnd of Enrollment System.");
    }
}


